
Main_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c0c  08002c0c  00012c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c34  08002c34  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002c34  08002c34  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c34  08002c34  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000084  08002cc0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002cc0  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097df  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b59  00000000  00000000  0002988c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c98  00000000  00000000  0002c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000badc  00000000  00000000  00043478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824df  00000000  00000000  0004ef54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000d1488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf4 	.word	0x08002bf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002bf4 	.word	0x08002bf4

0800014c <isButton1_pressed>:

int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1_pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1_pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1_pressed+0x16>
		button1_flag = 0; // Reset flag
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1_pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1_pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000a0 	.word	0x200000a0

08000170 <isButton2_pressed>:

int isButton2_pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2_pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2_pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2_pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2_pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000a4 	.word	0x200000a4

08000194 <isButton3_pressed>:

int isButton3_pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3_pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3_pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3_pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3_pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000a8 	.word	0x200000a8

080001b8 <Button_pushed>:


void Button_pushed(int flag_button){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if(flag_button == 1){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d102      	bne.n	80001cc <Button_pushed+0x14>
		button1_flag = 1;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <Button_pushed+0x38>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	}
	if(flag_button == 2){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d102      	bne.n	80001d8 <Button_pushed+0x20>
		button2_flag = 1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <Button_pushed+0x3c>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
	}
	if(flag_button == 3){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	d102      	bne.n	80001e4 <Button_pushed+0x2c>
		button3_flag = 1;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <Button_pushed+0x40>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	601a      	str	r2, [r3, #0]
	}
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	200000a4 	.word	0x200000a4
 80001f8:	200000a8 	.word	0x200000a8

080001fc <getKeyInput>:

void getKeyInput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	// variable for debouncing
	keyReg0 = keyReg1;
 8000200:	4b63      	ldr	r3, [pc, #396]	; (8000390 <getKeyInput+0x194>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a63      	ldr	r2, [pc, #396]	; (8000394 <getKeyInput+0x198>)
 8000206:	6013      	str	r3, [r2, #0]
	keyReg1 = keyReg2;
 8000208:	4b63      	ldr	r3, [pc, #396]	; (8000398 <getKeyInput+0x19c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a60      	ldr	r2, [pc, #384]	; (8000390 <getKeyInput+0x194>)
 800020e:	6013      	str	r3, [r2, #0]
	keyReg2 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000214:	4861      	ldr	r0, [pc, #388]	; (800039c <getKeyInput+0x1a0>)
 8000216:	f001 fcb5 	bl	8001b84 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b5e      	ldr	r3, [pc, #376]	; (8000398 <getKeyInput+0x19c>)
 8000220:	601a      	str	r2, [r3, #0]

	keyReg3 = keyReg4;
 8000222:	4b5f      	ldr	r3, [pc, #380]	; (80003a0 <getKeyInput+0x1a4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a5f      	ldr	r2, [pc, #380]	; (80003a4 <getKeyInput+0x1a8>)
 8000228:	6013      	str	r3, [r2, #0]
	keyReg4 = keyReg5;
 800022a:	4b5f      	ldr	r3, [pc, #380]	; (80003a8 <getKeyInput+0x1ac>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a5c      	ldr	r2, [pc, #368]	; (80003a0 <getKeyInput+0x1a4>)
 8000230:	6013      	str	r3, [r2, #0]
	keyReg5 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000236:	4859      	ldr	r0, [pc, #356]	; (800039c <getKeyInput+0x1a0>)
 8000238:	f001 fca4 	bl	8001b84 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <getKeyInput+0x1ac>)
 8000242:	601a      	str	r2, [r3, #0]

	keyReg6 = keyReg7;
 8000244:	4b59      	ldr	r3, [pc, #356]	; (80003ac <getKeyInput+0x1b0>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a59      	ldr	r2, [pc, #356]	; (80003b0 <getKeyInput+0x1b4>)
 800024a:	6013      	str	r3, [r2, #0]
	keyReg7 = keyReg8;
 800024c:	4b59      	ldr	r3, [pc, #356]	; (80003b4 <getKeyInput+0x1b8>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a56      	ldr	r2, [pc, #344]	; (80003ac <getKeyInput+0x1b0>)
 8000252:	6013      	str	r3, [r2, #0]
	keyReg8 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4850      	ldr	r0, [pc, #320]	; (800039c <getKeyInput+0x1a0>)
 800025a:	f001 fc93 	bl	8001b84 <HAL_GPIO_ReadPin>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b54      	ldr	r3, [pc, #336]	; (80003b4 <getKeyInput+0x1b8>)
 8000264:	601a      	str	r2, [r3, #0]

	if((keyReg0 == keyReg1) && (keyReg1 == keyReg2)){
 8000266:	4b4b      	ldr	r3, [pc, #300]	; (8000394 <getKeyInput+0x198>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b49      	ldr	r3, [pc, #292]	; (8000390 <getKeyInput+0x194>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d12a      	bne.n	80002c8 <getKeyInput+0xcc>
 8000272:	4b47      	ldr	r3, [pc, #284]	; (8000390 <getKeyInput+0x194>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b48      	ldr	r3, [pc, #288]	; (8000398 <getKeyInput+0x19c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d124      	bne.n	80002c8 <getKeyInput+0xcc>
		if(keyReg2 != keyReg_pre){  // When the button normally pressed if current state is different from previous state
 800027e:	4b46      	ldr	r3, [pc, #280]	; (8000398 <getKeyInput+0x19c>)
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	4b4d      	ldr	r3, [pc, #308]	; (80003b8 <getKeyInput+0x1bc>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	d00b      	beq.n	80002a2 <getKeyInput+0xa6>
			keyReg_pre = keyReg2;   // To set previous state  with current state and the current state (keyReg2) move to the next state
 800028a:	4b43      	ldr	r3, [pc, #268]	; (8000398 <getKeyInput+0x19c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a4a      	ldr	r2, [pc, #296]	; (80003b8 <getKeyInput+0x1bc>)
 8000290:	6013      	str	r3, [r2, #0]
			if(keyReg2 == PRESSED_SATE){
 8000292:	4b41      	ldr	r3, [pc, #260]	; (8000398 <getKeyInput+0x19c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d116      	bne.n	80002c8 <getKeyInput+0xcc>
				Button_pushed(1);
 800029a:	2001      	movs	r0, #1
 800029c:	f7ff ff8c 	bl	80001b8 <Button_pushed>
 80002a0:	e012      	b.n	80002c8 <getKeyInput+0xcc>
			}
		}
		else{ // If current state equal to previous state, that mean the button is being pressed hold (more than 1 second)
			counterForButtonPress1s--;
 80002a2:	4b46      	ldr	r3, [pc, #280]	; (80003bc <getKeyInput+0x1c0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	4a44      	ldr	r2, [pc, #272]	; (80003bc <getKeyInput+0x1c0>)
 80002aa:	6013      	str	r3, [r2, #0]
			if(counterForButtonPress1s <= 0){
 80002ac:	4b43      	ldr	r3, [pc, #268]	; (80003bc <getKeyInput+0x1c0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dc09      	bgt.n	80002c8 <getKeyInput+0xcc>
				if(keyReg2 == PRESSED_SATE){  // If don't have this condition, TODO still occur when button not be pressed cause pre-condition still satisfied
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <getKeyInput+0x19c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d102      	bne.n	80002c2 <getKeyInput+0xc6>
					Button_pushed(1);
 80002bc:	2001      	movs	r0, #1
 80002be:	f7ff ff7b 	bl	80001b8 <Button_pushed>
				}
				counterForButtonPress1s = 200;
 80002c2:	4b3e      	ldr	r3, [pc, #248]	; (80003bc <getKeyInput+0x1c0>)
 80002c4:	22c8      	movs	r2, #200	; 0xc8
 80002c6:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if((keyReg3 == keyReg4) && (keyReg4 == keyReg5)){
 80002c8:	4b36      	ldr	r3, [pc, #216]	; (80003a4 <getKeyInput+0x1a8>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b34      	ldr	r3, [pc, #208]	; (80003a0 <getKeyInput+0x1a4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d12a      	bne.n	800032a <getKeyInput+0x12e>
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <getKeyInput+0x1a4>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b33      	ldr	r3, [pc, #204]	; (80003a8 <getKeyInput+0x1ac>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d124      	bne.n	800032a <getKeyInput+0x12e>
		if(keyReg5 != keyReg_pre1){  // When the button normally pressed if current state is different from previous state
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <getKeyInput+0x1ac>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	4b36      	ldr	r3, [pc, #216]	; (80003c0 <getKeyInput+0x1c4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d00b      	beq.n	8000304 <getKeyInput+0x108>
			keyReg_pre1 = keyReg5;   // To set previous state  with current state and the current state (keyReg2) move to the next state
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <getKeyInput+0x1ac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a33      	ldr	r2, [pc, #204]	; (80003c0 <getKeyInput+0x1c4>)
 80002f2:	6013      	str	r3, [r2, #0]
			if(keyReg2 == PRESSED_SATE){
 80002f4:	4b28      	ldr	r3, [pc, #160]	; (8000398 <getKeyInput+0x19c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d116      	bne.n	800032a <getKeyInput+0x12e>
				Button_pushed(2);
 80002fc:	2002      	movs	r0, #2
 80002fe:	f7ff ff5b 	bl	80001b8 <Button_pushed>
 8000302:	e012      	b.n	800032a <getKeyInput+0x12e>
			}
		}
		else{ // If current state equal to previous state, that mean the button is being pressed hold (more than 1 second)
			counterForButtonPress1s--;
 8000304:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <getKeyInput+0x1c0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a2c      	ldr	r2, [pc, #176]	; (80003bc <getKeyInput+0x1c0>)
 800030c:	6013      	str	r3, [r2, #0]
			if(counterForButtonPress1s <= 0){
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <getKeyInput+0x1c0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dc09      	bgt.n	800032a <getKeyInput+0x12e>
				if(keyReg5 == PRESSED_SATE){  // If don't have this condition, TODO still occur when button not be pressed cause pre-condition still satisfied
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <getKeyInput+0x1ac>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d102      	bne.n	8000324 <getKeyInput+0x128>
					Button_pushed(2);
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff4a 	bl	80001b8 <Button_pushed>
				}
				counterForButtonPress1s = 200;
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <getKeyInput+0x1c0>)
 8000326:	22c8      	movs	r2, #200	; 0xc8
 8000328:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if((keyReg6 == keyReg7) && (keyReg7 == keyReg8)){
 800032a:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <getKeyInput+0x1b4>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <getKeyInput+0x1b0>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d12a      	bne.n	800038c <getKeyInput+0x190>
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <getKeyInput+0x1b0>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <getKeyInput+0x1b8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d124      	bne.n	800038c <getKeyInput+0x190>
		if(keyReg8 != keyReg_pre2){  // When the button normally pressed if current state is different from previous state
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <getKeyInput+0x1b8>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeyInput+0x1c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	d00b      	beq.n	8000366 <getKeyInput+0x16a>
			keyReg_pre2 = keyReg8;   // To set previous state  with current state and the current state (keyReg2) move to the next state
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <getKeyInput+0x1b8>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <getKeyInput+0x1c8>)
 8000354:	6013      	str	r3, [r2, #0]
			if(keyReg8 == PRESSED_SATE){
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <getKeyInput+0x1b8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d116      	bne.n	800038c <getKeyInput+0x190>
				Button_pushed(3);
 800035e:	2003      	movs	r0, #3
 8000360:	f7ff ff2a 	bl	80001b8 <Button_pushed>
				}
				counterForButtonPress1s = 200;
			}
		}
	}
}
 8000364:	e012      	b.n	800038c <getKeyInput+0x190>
			counterForButtonPress1s--;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <getKeyInput+0x1c0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a13      	ldr	r2, [pc, #76]	; (80003bc <getKeyInput+0x1c0>)
 800036e:	6013      	str	r3, [r2, #0]
			if(counterForButtonPress1s <= 0){
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <getKeyInput+0x1c0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	dc09      	bgt.n	800038c <getKeyInput+0x190>
				if(keyReg8 == PRESSED_SATE){  // If don't have this condition, TODO still occur when button not be pressed cause pre-condition still satisfied
 8000378:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <getKeyInput+0x1b8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d102      	bne.n	8000386 <getKeyInput+0x18a>
					Button_pushed(3);
 8000380:	2003      	movs	r0, #3
 8000382:	f7ff ff19 	bl	80001b8 <Button_pushed>
				counterForButtonPress1s = 200;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <getKeyInput+0x1c0>)
 8000388:	22c8      	movs	r2, #200	; 0xc8
 800038a:	601a      	str	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000004 	.word	0x20000004
 8000394:	20000000 	.word	0x20000000
 8000398:	20000008 	.word	0x20000008
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	20000010 	.word	0x20000010
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	20000014 	.word	0x20000014
 80003ac:	2000001c 	.word	0x2000001c
 80003b0:	20000018 	.word	0x20000018
 80003b4:	20000020 	.word	0x20000020
 80003b8:	20000024 	.word	0x20000024
 80003bc:	20000030 	.word	0x20000030
 80003c0:	20000028 	.word	0x20000028
 80003c4:	2000002c 	.word	0x2000002c

080003c8 <clear_light_buffer>:
#include "fms_manual.h"
#include "fms_trafficLight.h"

int duration_buffer[3] = {5000, 2000, 3000};

void clear_light_buffer(){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	duration_buffer[0] = 0;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <clear_light_buffer+0x20>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
	duration_buffer[1] = 0;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <clear_light_buffer+0x20>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
	duration_buffer[2] = 0;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <clear_light_buffer+0x20>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000034 	.word	0x20000034

080003ec <update_time_light_changed>:

void update_time_light_changed(){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	    duration_red = duration_buffer[0];
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <update_time_light_changed+0x24>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <update_time_light_changed+0x28>)
 80003f6:	6013      	str	r3, [r2, #0]
	    duration_amber = duration_buffer[1] ;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <update_time_light_changed+0x24>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a06      	ldr	r2, [pc, #24]	; (8000418 <update_time_light_changed+0x2c>)
 80003fe:	6013      	str	r3, [r2, #0]
	    duration_green = duration_buffer[2];
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <update_time_light_changed+0x24>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a05      	ldr	r2, [pc, #20]	; (800041c <update_time_light_changed+0x30>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	20000034 	.word	0x20000034
 8000414:	2000005c 	.word	0x2000005c
 8000418:	20000058 	.word	0x20000058
 800041c:	20000060 	.word	0x20000060

08000420 <fms_manual_run>:

void fms_manual_run() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	switch(status) {
 8000424:	4b98      	ldr	r3, [pc, #608]	; (8000688 <fms_manual_run+0x268>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b16      	subs	r3, #22
 800042a:	2b03      	cmp	r3, #3
 800042c:	f200 8120 	bhi.w	8000670 <fms_manual_run+0x250>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <fms_manual_run+0x18>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	080004ed 	.word	0x080004ed
 8000440:	0800056b 	.word	0x0800056b
 8000444:	080005e7 	.word	0x080005e7
	case NORMAL_MODE:
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2102      	movs	r1, #2
 800044c:	488f      	ldr	r0, [pc, #572]	; (800068c <fms_manual_run+0x26c>)
 800044e:	f001 fbb0 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2108      	movs	r1, #8
 8000456:	488d      	ldr	r0, [pc, #564]	; (800068c <fms_manual_run+0x26c>)
 8000458:	f001 fbab 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2104      	movs	r1, #4
 8000460:	488a      	ldr	r0, [pc, #552]	; (800068c <fms_manual_run+0x26c>)
 8000462:	f001 fba6 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2110      	movs	r1, #16
 800046a:	4888      	ldr	r0, [pc, #544]	; (800068c <fms_manual_run+0x26c>)
 800046c:	f001 fba1 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	4885      	ldr	r0, [pc, #532]	; (800068c <fms_manual_run+0x26c>)
 8000476:	f001 fb9c 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2120      	movs	r1, #32
 800047e:	4883      	ldr	r0, [pc, #524]	; (800068c <fms_manual_run+0x26c>)
 8000480:	f001 fb97 	bl	8001bb2 <HAL_GPIO_WritePin>

		if(!check_valid_duration()){
 8000484:	f000 fdd6 	bl	8001034 <check_valid_duration>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d101      	bne.n	8000492 <fms_manual_run+0x72>
			clear_light_buffer();
 800048e:	f7ff ff9b 	bl	80003c8 <clear_light_buffer>
		}

		display_led1 = duration_red/1000;
 8000492:	4b7f      	ldr	r3, [pc, #508]	; (8000690 <fms_manual_run+0x270>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a7f      	ldr	r2, [pc, #508]	; (8000694 <fms_manual_run+0x274>)
 8000498:	fb82 1203 	smull	r1, r2, r2, r3
 800049c:	1192      	asrs	r2, r2, #6
 800049e:	17db      	asrs	r3, r3, #31
 80004a0:	1ad3      	subs	r3, r2, r3
 80004a2:	4a7d      	ldr	r2, [pc, #500]	; (8000698 <fms_manual_run+0x278>)
 80004a4:	6013      	str	r3, [r2, #0]
		display_led2 = duration_green/1000;
 80004a6:	4b7d      	ldr	r3, [pc, #500]	; (800069c <fms_manual_run+0x27c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a7a      	ldr	r2, [pc, #488]	; (8000694 <fms_manual_run+0x274>)
 80004ac:	fb82 1203 	smull	r1, r2, r2, r3
 80004b0:	1192      	asrs	r2, r2, #6
 80004b2:	17db      	asrs	r3, r3, #31
 80004b4:	1ad3      	subs	r3, r2, r3
 80004b6:	4a7a      	ldr	r2, [pc, #488]	; (80006a0 <fms_manual_run+0x280>)
 80004b8:	6013      	str	r3, [r2, #0]



		if(timer1_flag == 1) {
 80004ba:	4b7a      	ldr	r3, [pc, #488]	; (80006a4 <fms_manual_run+0x284>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d106      	bne.n	80004d0 <fms_manual_run+0xb0>
			status = RED1_GREEN2;
 80004c2:	4b71      	ldr	r3, [pc, #452]	; (8000688 <fms_manual_run+0x268>)
 80004c4:	2202      	movs	r2, #2
 80004c6:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 80004c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004cc:	f000 fef6 	bl	80012bc <setTimer1>
		}
		if(isButton1_pressed() == 1) {
 80004d0:	f7ff fe3c 	bl	800014c <isButton1_pressed>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	f040 80cc 	bne.w	8000674 <fms_manual_run+0x254>
			status = MODE_2;
 80004dc:	4b6a      	ldr	r3, [pc, #424]	; (8000688 <fms_manual_run+0x268>)
 80004de:	2217      	movs	r2, #23
 80004e0:	601a      	str	r2, [r3, #0]
			setTimer1(10000); // Wait 10s, all route is stopped, if button 1 is not pressed, turn to normal MODE
 80004e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80004e6:	f000 fee9 	bl	80012bc <setTimer1>
		}
		break;
 80004ea:	e0c3      	b.n	8000674 <fms_manual_run+0x254>
	case MODE_2:
		num_MODE = 2;
 80004ec:	4b6e      	ldr	r3, [pc, #440]	; (80006a8 <fms_manual_run+0x288>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	601a      	str	r2, [r3, #0]
		display_led2 = 2; // Display mode in 2
 80004f2:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <fms_manual_run+0x280>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 80004f8:	f000 f9ba 	bl	8000870 <updateClockBuffer>
		blink_red_led_2hz();
 80004fc:	f000 fd16 	bl	8000f2c <blink_red_led_2hz>
		if(timer1_flag == 1) {
 8000500:	4b68      	ldr	r3, [pc, #416]	; (80006a4 <fms_manual_run+0x284>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d106      	bne.n	8000516 <fms_manual_run+0xf6>
			status = RED1_GREEN2;
 8000508:	4b5f      	ldr	r3, [pc, #380]	; (8000688 <fms_manual_run+0x268>)
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 800050e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000512:	f000 fed3 	bl	80012bc <setTimer1>
		}

		if(isButton1_pressed() == 1) {
 8000516:	f7ff fe19 	bl	800014c <isButton1_pressed>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d106      	bne.n	800052e <fms_manual_run+0x10e>
			status = MODE_3;
 8000520:	4b59      	ldr	r3, [pc, #356]	; (8000688 <fms_manual_run+0x268>)
 8000522:	2218      	movs	r2, #24
 8000524:	601a      	str	r2, [r3, #0]
			setTimer1(10000); // if button not pressed in 10s, status = auto
 8000526:	f242 7010 	movw	r0, #10000	; 0x2710
 800052a:	f000 fec7 	bl	80012bc <setTimer1>
		}

		if(isButton2_pressed() == 1){
 800052e:	f7ff fe1f 	bl	8000170 <isButton2_pressed>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d10d      	bne.n	8000554 <fms_manual_run+0x134>
			temp_duration_red = temp_duration_red + 1000;
 8000538:	4b5c      	ldr	r3, [pc, #368]	; (80006ac <fms_manual_run+0x28c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000540:	4a5a      	ldr	r2, [pc, #360]	; (80006ac <fms_manual_run+0x28c>)
 8000542:	6013      	str	r3, [r2, #0]
			if(temp_duration_red/1000 > 99){
 8000544:	4b59      	ldr	r3, [pc, #356]	; (80006ac <fms_manual_run+0x28c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a59      	ldr	r2, [pc, #356]	; (80006b0 <fms_manual_run+0x290>)
 800054a:	4293      	cmp	r3, r2
 800054c:	dd02      	ble.n	8000554 <fms_manual_run+0x134>
				temp_duration_red = 99000;
 800054e:	4b57      	ldr	r3, [pc, #348]	; (80006ac <fms_manual_run+0x28c>)
 8000550:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <fms_manual_run+0x294>)
 8000552:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButton3_pressed()){
 8000554:	f7ff fe1e 	bl	8000194 <isButton3_pressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	f000 808c 	beq.w	8000678 <fms_manual_run+0x258>
			duration_buffer[0] = temp_duration_red;
 8000560:	4b52      	ldr	r3, [pc, #328]	; (80006ac <fms_manual_run+0x28c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <fms_manual_run+0x298>)
 8000566:	6013      	str	r3, [r2, #0]
		}

		break;
 8000568:	e086      	b.n	8000678 <fms_manual_run+0x258>
	case MODE_3:
		num_MODE = 3;
 800056a:	4b4f      	ldr	r3, [pc, #316]	; (80006a8 <fms_manual_run+0x288>)
 800056c:	2203      	movs	r2, #3
 800056e:	601a      	str	r2, [r3, #0]
		display_led2 = 3; // Display mode 3
 8000570:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <fms_manual_run+0x280>)
 8000572:	2203      	movs	r2, #3
 8000574:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 8000576:	f000 f97b 	bl	8000870 <updateClockBuffer>
		blink_amber_led_2hz();
 800057a:	f000 fd2f 	bl	8000fdc <blink_amber_led_2hz>
		if(timer1_flag == 1) {
 800057e:	4b49      	ldr	r3, [pc, #292]	; (80006a4 <fms_manual_run+0x284>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d106      	bne.n	8000594 <fms_manual_run+0x174>
			status = RED1_GREEN2;
 8000586:	4b40      	ldr	r3, [pc, #256]	; (8000688 <fms_manual_run+0x268>)
 8000588:	2202      	movs	r2, #2
 800058a:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 800058c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000590:	f000 fe94 	bl	80012bc <setTimer1>
		}

		if(isButton1_pressed() == 1) {
 8000594:	f7ff fdda 	bl	800014c <isButton1_pressed>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d106      	bne.n	80005ac <fms_manual_run+0x18c>
			status = MODE_4;
 800059e:	4b3a      	ldr	r3, [pc, #232]	; (8000688 <fms_manual_run+0x268>)
 80005a0:	2219      	movs	r2, #25
 80005a2:	601a      	str	r2, [r3, #0]
			setTimer1(10000); // if button not pressed in 10s, status = auto
 80005a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80005a8:	f000 fe88 	bl	80012bc <setTimer1>
		}

		if(isButton2_pressed() == 1){
 80005ac:	f7ff fde0 	bl	8000170 <isButton2_pressed>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10d      	bne.n	80005d2 <fms_manual_run+0x1b2>
			temp_duration_amber = temp_duration_amber + 1000;
 80005b6:	4b41      	ldr	r3, [pc, #260]	; (80006bc <fms_manual_run+0x29c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80005be:	4a3f      	ldr	r2, [pc, #252]	; (80006bc <fms_manual_run+0x29c>)
 80005c0:	6013      	str	r3, [r2, #0]
			if(temp_duration_amber/1000 > 99){
 80005c2:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <fms_manual_run+0x29c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a3a      	ldr	r2, [pc, #232]	; (80006b0 <fms_manual_run+0x290>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	dd02      	ble.n	80005d2 <fms_manual_run+0x1b2>
				temp_duration_amber = 99000;
 80005cc:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <fms_manual_run+0x29c>)
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <fms_manual_run+0x294>)
 80005d0:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButton3_pressed()){
 80005d2:	f7ff fddf 	bl	8000194 <isButton3_pressed>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d04f      	beq.n	800067c <fms_manual_run+0x25c>
			duration_buffer[1] = temp_duration_amber;
 80005dc:	4b37      	ldr	r3, [pc, #220]	; (80006bc <fms_manual_run+0x29c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a35      	ldr	r2, [pc, #212]	; (80006b8 <fms_manual_run+0x298>)
 80005e2:	6053      	str	r3, [r2, #4]
		}

		break;
 80005e4:	e04a      	b.n	800067c <fms_manual_run+0x25c>
	case MODE_4:
		num_MODE = 4;
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <fms_manual_run+0x288>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	601a      	str	r2, [r3, #0]
		display_led2 = 4; // Display mode 4
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <fms_manual_run+0x280>)
 80005ee:	2204      	movs	r2, #4
 80005f0:	601a      	str	r2, [r3, #0]
		updateClockBuffer();
 80005f2:	f000 f93d 	bl	8000870 <updateClockBuffer>
		blink_green_led_2hz();
 80005f6:	f000 fcc5 	bl	8000f84 <blink_green_led_2hz>
		if(timer1_flag == 1) {
 80005fa:	4b2a      	ldr	r3, [pc, #168]	; (80006a4 <fms_manual_run+0x284>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d106      	bne.n	8000610 <fms_manual_run+0x1f0>
			status = RED1_GREEN2;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <fms_manual_run+0x268>)
 8000604:	2202      	movs	r2, #2
 8000606:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000608:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800060c:	f000 fe56 	bl	80012bc <setTimer1>
		}
		if(isButton1_pressed() == 1) {
 8000610:	f7ff fd9c 	bl	800014c <isButton1_pressed>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d106      	bne.n	8000628 <fms_manual_run+0x208>
			status = NORMAL_MODE;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <fms_manual_run+0x268>)
 800061c:	2216      	movs	r2, #22
 800061e:	601a      	str	r2, [r3, #0]
			setTimer1(10000); // if button not pressed in 10s, status = auto
 8000620:	f242 7010 	movw	r0, #10000	; 0x2710
 8000624:	f000 fe4a 	bl	80012bc <setTimer1>
		}

		if(isButton2_pressed() == 1){
 8000628:	f7ff fda2 	bl	8000170 <isButton2_pressed>
 800062c:	4603      	mov	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10d      	bne.n	800064e <fms_manual_run+0x22e>
			temp_duration_green = temp_duration_green + 1000;
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <fms_manual_run+0x2a0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800063a:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <fms_manual_run+0x2a0>)
 800063c:	6013      	str	r3, [r2, #0]
			if(temp_duration_green/1000 > 99){
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <fms_manual_run+0x2a0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <fms_manual_run+0x290>)
 8000644:	4293      	cmp	r3, r2
 8000646:	dd02      	ble.n	800064e <fms_manual_run+0x22e>
				temp_duration_green = 99000;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <fms_manual_run+0x2a0>)
 800064a:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <fms_manual_run+0x294>)
 800064c:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButton3_pressed()){
 800064e:	f7ff fda1 	bl	8000194 <isButton3_pressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <fms_manual_run+0x240>
			duration_buffer[2] = temp_duration_green;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <fms_manual_run+0x2a0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a16      	ldr	r2, [pc, #88]	; (80006b8 <fms_manual_run+0x298>)
 800065e:	6093      	str	r3, [r2, #8]
		}

		if(check_valid_duration()){
 8000660:	f000 fce8 	bl	8001034 <check_valid_duration>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <fms_manual_run+0x260>
			update_time_light_changed();
 800066a:	f7ff febf 	bl	80003ec <update_time_light_changed>
		}

		break;
 800066e:	e007      	b.n	8000680 <fms_manual_run+0x260>
	default:
		break;
 8000670:	bf00      	nop
 8000672:	e006      	b.n	8000682 <fms_manual_run+0x262>
		break;
 8000674:	bf00      	nop
 8000676:	e004      	b.n	8000682 <fms_manual_run+0x262>
		break;
 8000678:	bf00      	nop
 800067a:	e002      	b.n	8000682 <fms_manual_run+0x262>
		break;
 800067c:	bf00      	nop
 800067e:	e000      	b.n	8000682 <fms_manual_run+0x262>
		break;
 8000680:	bf00      	nop
	}
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000064 	.word	0x20000064
 800068c:	40010800 	.word	0x40010800
 8000690:	2000005c 	.word	0x2000005c
 8000694:	10624dd3 	.word	0x10624dd3
 8000698:	20000050 	.word	0x20000050
 800069c:	20000060 	.word	0x20000060
 80006a0:	20000054 	.word	0x20000054
 80006a4:	200000b8 	.word	0x200000b8
 80006a8:	20000074 	.word	0x20000074
 80006ac:	20000068 	.word	0x20000068
 80006b0:	0001869f 	.word	0x0001869f
 80006b4:	000182b8 	.word	0x000182b8
 80006b8:	20000034 	.word	0x20000034
 80006bc:	20000070 	.word	0x20000070
 80006c0:	2000006c 	.word	0x2000006c

080006c4 <led_7SEG_Run>:
//    display_led1 = duration_red / 1000;
//    display_led2 = duration_green / 1000;
//
//}

void led_7SEG_Run(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	  if(timer3_flag == 1){
 80006c8:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <led_7SEG_Run+0x124>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	f040 8089 	bne.w	80007e4 <led_7SEG_Run+0x120>
		  if(!isButton1_pressed()){
 80006d2:	f7ff fd3b 	bl	800014c <isButton1_pressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10a      	bne.n	80006f2 <led_7SEG_Run+0x2e>
			  display_led1--;
 80006dc:	4b43      	ldr	r3, [pc, #268]	; (80007ec <led_7SEG_Run+0x128>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	4a42      	ldr	r2, [pc, #264]	; (80007ec <led_7SEG_Run+0x128>)
 80006e4:	6013      	str	r3, [r2, #0]
			  display_led2--;
 80006e6:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <led_7SEG_Run+0x12c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a40      	ldr	r2, [pc, #256]	; (80007f0 <led_7SEG_Run+0x12c>)
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e008      	b.n	8000704 <led_7SEG_Run+0x40>
		  }
		  else{
			  display_led1--;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <led_7SEG_Run+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a3c      	ldr	r2, [pc, #240]	; (80007ec <led_7SEG_Run+0x128>)
 80006fa:	6013      	str	r3, [r2, #0]
			  display_led2 = num_MODE;
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <led_7SEG_Run+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a3b      	ldr	r2, [pc, #236]	; (80007f0 <led_7SEG_Run+0x12c>)
 8000702:	6013      	str	r3, [r2, #0]
		  }
//		  (status == RED1_AMBER2)
		  if((display_led2 <= 0) && (display_led1 > 0)){
 8000704:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <led_7SEG_Run+0x12c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	dc0d      	bgt.n	8000728 <led_7SEG_Run+0x64>
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <led_7SEG_Run+0x128>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	dd09      	ble.n	8000728 <led_7SEG_Run+0x64>
			  display_led2 = duration_amber/1000;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <led_7SEG_Run+0x134>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a38      	ldr	r2, [pc, #224]	; (80007fc <led_7SEG_Run+0x138>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1192      	asrs	r2, r2, #6
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <led_7SEG_Run+0x12c>)
 8000726:	6013      	str	r3, [r2, #0]
		  }
		  if((display_led1 <= 0) && (display_led2 <= 0) && (flag == 0)){
 8000728:	4b30      	ldr	r3, [pc, #192]	; (80007ec <led_7SEG_Run+0x128>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dc1e      	bgt.n	800076e <led_7SEG_Run+0xaa>
 8000730:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <led_7SEG_Run+0x12c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	dc1a      	bgt.n	800076e <led_7SEG_Run+0xaa>
 8000738:	4b31      	ldr	r3, [pc, #196]	; (8000800 <led_7SEG_Run+0x13c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d116      	bne.n	800076e <led_7SEG_Run+0xaa>
			  flag = 1;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <led_7SEG_Run+0x13c>)
 8000742:	2201      	movs	r2, #1
 8000744:	601a      	str	r2, [r3, #0]
			  display_led1 = duration_green/1000;
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <led_7SEG_Run+0x140>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <led_7SEG_Run+0x138>)
 800074c:	fb82 1203 	smull	r1, r2, r2, r3
 8000750:	1192      	asrs	r2, r2, #6
 8000752:	17db      	asrs	r3, r3, #31
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a25      	ldr	r2, [pc, #148]	; (80007ec <led_7SEG_Run+0x128>)
 8000758:	6013      	str	r3, [r2, #0]
			  display_led2 = duration_red/1000;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <led_7SEG_Run+0x144>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a27      	ldr	r2, [pc, #156]	; (80007fc <led_7SEG_Run+0x138>)
 8000760:	fb82 1203 	smull	r1, r2, r2, r3
 8000764:	1192      	asrs	r2, r2, #6
 8000766:	17db      	asrs	r3, r3, #31
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <led_7SEG_Run+0x12c>)
 800076c:	6013      	str	r3, [r2, #0]
		  }
		  if((display_led1 <= 0) && (display_led2 > 0)){
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <led_7SEG_Run+0x128>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	dc0d      	bgt.n	8000792 <led_7SEG_Run+0xce>
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <led_7SEG_Run+0x12c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	dd09      	ble.n	8000792 <led_7SEG_Run+0xce>
			  display_led1 = duration_amber/1000;
 800077e:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <led_7SEG_Run+0x134>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <led_7SEG_Run+0x138>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	1192      	asrs	r2, r2, #6
 800078a:	17db      	asrs	r3, r3, #31
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <led_7SEG_Run+0x128>)
 8000790:	6013      	str	r3, [r2, #0]
		  }
		  if((display_led1 <= 0) && (display_led2 <= 0) && (flag == 1)){
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <led_7SEG_Run+0x128>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	dc1e      	bgt.n	80007d8 <led_7SEG_Run+0x114>
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <led_7SEG_Run+0x12c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dc1a      	bgt.n	80007d8 <led_7SEG_Run+0x114>
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <led_7SEG_Run+0x13c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d116      	bne.n	80007d8 <led_7SEG_Run+0x114>
			  flag = 0;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <led_7SEG_Run+0x13c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
			  display_led1 = duration_red/1000;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <led_7SEG_Run+0x144>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a11      	ldr	r2, [pc, #68]	; (80007fc <led_7SEG_Run+0x138>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1192      	asrs	r2, r2, #6
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <led_7SEG_Run+0x128>)
 80007c2:	6013      	str	r3, [r2, #0]
			  display_led2 = duration_green/1000;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <led_7SEG_Run+0x140>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <led_7SEG_Run+0x138>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1192      	asrs	r2, r2, #6
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <led_7SEG_Run+0x12c>)
 80007d6:	6013      	str	r3, [r2, #0]
		  }

		  updateClockBuffer();
 80007d8:	f000 f84a 	bl	8000870 <updateClockBuffer>
		  setTimer3(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e0:	f000 fda4 	bl	800132c <setTimer3>
	  }
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	20000050 	.word	0x20000050
 80007f0:	20000054 	.word	0x20000054
 80007f4:	20000074 	.word	0x20000074
 80007f8:	20000058 	.word	0x20000058
 80007fc:	10624dd3 	.word	0x10624dd3
 8000800:	200000ac 	.word	0x200000ac
 8000804:	20000060 	.word	0x20000060
 8000808:	2000005c 	.word	0x2000005c

0800080c <time_light_run>:

void time_light_run(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	if(timer2_flag == 1){
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <time_light_run+0x54>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d120      	bne.n	800085a <time_light_run+0x4e>
		if(index_led < MAX_LED){
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <time_light_run+0x58>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <time_light_run+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	429a      	cmp	r2, r3
 8000822:	da17      	bge.n	8000854 <time_light_run+0x48>
			setTimer2(250);
 8000824:	20fa      	movs	r0, #250	; 0xfa
 8000826:	f000 fd65 	bl	80012f4 <setTimer2>
			display_7SEG(led_buffer[index_led]);
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <time_light_run+0x58>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <time_light_run+0x60>)
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f96d 	bl	8000b14 <display_7SEG>
			update7SEG(index_led);
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <time_light_run+0x58>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 faf6 	bl	8000e30 <update7SEG>
			updateClockBuffer();
 8000844:	f000 f814 	bl	8000870 <updateClockBuffer>
			index_led++;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <time_light_run+0x58>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	3301      	adds	r3, #1
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <time_light_run+0x58>)
 8000850:	6013      	str	r3, [r2, #0]
			}
		else {
			index_led = 0;
		}
	}
}
 8000852:	e002      	b.n	800085a <time_light_run+0x4e>
			index_led = 0;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <time_light_run+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000c0 	.word	0x200000c0
 8000864:	200000b0 	.word	0x200000b0
 8000868:	08002c0c 	.word	0x08002c0c
 800086c:	20000040 	.word	0x20000040

08000870 <updateClockBuffer>:


void updateClockBuffer() {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	led_buffer[0] = display_led1/10;
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <updateClockBuffer+0x9c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a25      	ldr	r2, [pc, #148]	; (8000910 <updateClockBuffer+0xa0>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1092      	asrs	r2, r2, #2
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a23      	ldr	r2, [pc, #140]	; (8000914 <updateClockBuffer+0xa4>)
 8000886:	6013      	str	r3, [r2, #0]
	led_buffer[1] = display_led1%10;
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <updateClockBuffer+0x9c>)
 800088a:	6819      	ldr	r1, [r3, #0]
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <updateClockBuffer+0xa0>)
 800088e:	fb83 2301 	smull	r2, r3, r3, r1
 8000892:	109a      	asrs	r2, r3, #2
 8000894:	17cb      	asrs	r3, r1, #31
 8000896:	1ad2      	subs	r2, r2, r3
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	1aca      	subs	r2, r1, r3
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <updateClockBuffer+0xa4>)
 80008a4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = display_led2/10;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <updateClockBuffer+0xa8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <updateClockBuffer+0xa0>)
 80008ac:	fb82 1203 	smull	r1, r2, r2, r3
 80008b0:	1092      	asrs	r2, r2, #2
 80008b2:	17db      	asrs	r3, r3, #31
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <updateClockBuffer+0xa4>)
 80008b8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = display_led2%10;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <updateClockBuffer+0xa8>)
 80008bc:	6819      	ldr	r1, [r3, #0]
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <updateClockBuffer+0xa0>)
 80008c0:	fb83 2301 	smull	r2, r3, r3, r1
 80008c4:	109a      	asrs	r2, r3, #2
 80008c6:	17cb      	asrs	r3, r1, #31
 80008c8:	1ad2      	subs	r2, r2, r3
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	1aca      	subs	r2, r1, r3
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <updateClockBuffer+0xa4>)
 80008d6:	60da      	str	r2, [r3, #12]

	// Display value 0 on the 1st led 7 segment if time light has 1 digit
	if (display_led1 <= 9) {
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <updateClockBuffer+0x9c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b09      	cmp	r3, #9
 80008de:	dc06      	bgt.n	80008ee <updateClockBuffer+0x7e>
		led_buffer[0] = 0;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <updateClockBuffer+0xa4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
		led_buffer[1] = display_led1;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <updateClockBuffer+0x9c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <updateClockBuffer+0xa4>)
 80008ec:	6053      	str	r3, [r2, #4]
	}

	// Display value 0 on the 3rd led 7 segment if time light has 1 digit
	if (display_led2 <= 9) {
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <updateClockBuffer+0xa8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b09      	cmp	r3, #9
 80008f4:	dc06      	bgt.n	8000904 <updateClockBuffer+0x94>
		led_buffer[2] = 0;
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <updateClockBuffer+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
		led_buffer[3] = display_led2;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <updateClockBuffer+0xa8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <updateClockBuffer+0xa4>)
 8000902:	60d3      	str	r3, [r2, #12]
	}
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000050 	.word	0x20000050
 8000910:	66666667 	.word	0x66666667
 8000914:	20000040 	.word	0x20000040
 8000918:	20000054 	.word	0x20000054

0800091c <fmsRun>:


void fmsRun(){
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	time_light_run();
 8000920:	f7ff ff74 	bl	800080c <time_light_run>
	led_7SEG_Run();
 8000924:	f7ff fece 	bl	80006c4 <led_7SEG_Run>
	switch(status){
 8000928:	4b75      	ldr	r3, [pc, #468]	; (8000b00 <fmsRun+0x1e4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3b01      	subs	r3, #1
 800092e:	2b04      	cmp	r3, #4
 8000930:	f200 80da 	bhi.w	8000ae8 <fmsRun+0x1cc>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <fmsRun+0x20>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	08000951 	.word	0x08000951
 8000940:	0800096b 	.word	0x0800096b
 8000944:	080009db 	.word	0x080009db
 8000948:	08000a35 	.word	0x08000a35
 800094c:	08000a8f 	.word	0x08000a8f
	case INIT:
		clearALL_light();
 8000950:	f000 faaa 	bl	8000ea8 <clearALL_light>
		status = RED1_GREEN2;
 8000954:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <fmsRun+0x1e4>)
 8000956:	2202      	movs	r2, #2
 8000958:	601a      	str	r2, [r3, #0]
		setTimer1(duration_green);
 800095a:	4b6a      	ldr	r3, [pc, #424]	; (8000b04 <fmsRun+0x1e8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fcac 	bl	80012bc <setTimer1>
		isButton1_pressed(); // Clear flag button 1 if it is being pressed, just allowing button 1 is being pressed in state status = RED1_GREEN2
 8000964:	f7ff fbf2 	bl	800014c <isButton1_pressed>
		break;
 8000968:	e0c7      	b.n	8000afa <fmsRun+0x1de>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	4866      	ldr	r0, [pc, #408]	; (8000b08 <fmsRun+0x1ec>)
 8000970:	f001 f91f 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2108      	movs	r1, #8
 8000978:	4863      	ldr	r0, [pc, #396]	; (8000b08 <fmsRun+0x1ec>)
 800097a:	f001 f91a 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2104      	movs	r1, #4
 8000982:	4861      	ldr	r0, [pc, #388]	; (8000b08 <fmsRun+0x1ec>)
 8000984:	f001 f915 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	485e      	ldr	r0, [pc, #376]	; (8000b08 <fmsRun+0x1ec>)
 800098e:	f001 f910 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	485c      	ldr	r0, [pc, #368]	; (8000b08 <fmsRun+0x1ec>)
 8000998:	f001 f90b 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2120      	movs	r1, #32
 80009a0:	4859      	ldr	r0, [pc, #356]	; (8000b08 <fmsRun+0x1ec>)
 80009a2:	f001 f906 	bl	8001bb2 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 80009a6:	4b59      	ldr	r3, [pc, #356]	; (8000b0c <fmsRun+0x1f0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d107      	bne.n	80009be <fmsRun+0xa2>
			setTimer1(duration_amber);
 80009ae:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <fmsRun+0x1f4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fc82 	bl	80012bc <setTimer1>
			status = RED1_AMBER2;
 80009b8:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <fmsRun+0x1e4>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	601a      	str	r2, [r3, #0]
		}

		if(isButton1_pressed() == 1) {
 80009be:	f7ff fbc5 	bl	800014c <isButton1_pressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	f040 8091 	bne.w	8000aec <fmsRun+0x1d0>
			status = NORMAL_MODE;
 80009ca:	4b4d      	ldr	r3, [pc, #308]	; (8000b00 <fmsRun+0x1e4>)
 80009cc:	2216      	movs	r2, #22
 80009ce:	601a      	str	r2, [r3, #0]
			setTimer1(10000); // if button not pressed in 10s, status = auto
 80009d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80009d4:	f000 fc72 	bl	80012bc <setTimer1>
		}
		break;
 80009d8:	e088      	b.n	8000aec <fmsRun+0x1d0>
	case RED1_AMBER2:
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2102      	movs	r1, #2
 80009de:	484a      	ldr	r0, [pc, #296]	; (8000b08 <fmsRun+0x1ec>)
 80009e0:	f001 f8e7 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2108      	movs	r1, #8
 80009e8:	4847      	ldr	r0, [pc, #284]	; (8000b08 <fmsRun+0x1ec>)
 80009ea:	f001 f8e2 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2104      	movs	r1, #4
 80009f2:	4845      	ldr	r0, [pc, #276]	; (8000b08 <fmsRun+0x1ec>)
 80009f4:	f001 f8dd 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	4842      	ldr	r0, [pc, #264]	; (8000b08 <fmsRun+0x1ec>)
 80009fe:	f001 f8d8 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	4840      	ldr	r0, [pc, #256]	; (8000b08 <fmsRun+0x1ec>)
 8000a08:	f001 f8d3 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2120      	movs	r1, #32
 8000a10:	483d      	ldr	r0, [pc, #244]	; (8000b08 <fmsRun+0x1ec>)
 8000a12:	f001 f8ce 	bl	8001bb2 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <fmsRun+0x1f0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d168      	bne.n	8000af0 <fmsRun+0x1d4>
			setTimer1(duration_green);
 8000a1e:	4b39      	ldr	r3, [pc, #228]	; (8000b04 <fmsRun+0x1e8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fc4a 	bl	80012bc <setTimer1>
			status = GREEN1_RED2;
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <fmsRun+0x1e4>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
			isButton1_pressed();
 8000a2e:	f7ff fb8d 	bl	800014c <isButton1_pressed>
		}
		break;
 8000a32:	e05d      	b.n	8000af0 <fmsRun+0x1d4>
	case GREEN1_RED2:
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2102      	movs	r1, #2
 8000a38:	4833      	ldr	r0, [pc, #204]	; (8000b08 <fmsRun+0x1ec>)
 8000a3a:	f001 f8ba 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2108      	movs	r1, #8
 8000a42:	4831      	ldr	r0, [pc, #196]	; (8000b08 <fmsRun+0x1ec>)
 8000a44:	f001 f8b5 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	482e      	ldr	r0, [pc, #184]	; (8000b08 <fmsRun+0x1ec>)
 8000a4e:	f001 f8b0 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <fmsRun+0x1ec>)
 8000a58:	f001 f8ab 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4829      	ldr	r0, [pc, #164]	; (8000b08 <fmsRun+0x1ec>)
 8000a62:	f001 f8a6 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4827      	ldr	r0, [pc, #156]	; (8000b08 <fmsRun+0x1ec>)
 8000a6c:	f001 f8a1 	bl	8001bb2 <HAL_GPIO_WritePin>

		if(timer1_flag == 1){
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <fmsRun+0x1f0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d13d      	bne.n	8000af4 <fmsRun+0x1d8>
			setTimer1(duration_amber);
 8000a78:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <fmsRun+0x1f4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fc1d 	bl	80012bc <setTimer1>
			status = AMBER1_RED2;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <fmsRun+0x1e4>)
 8000a84:	2205      	movs	r2, #5
 8000a86:	601a      	str	r2, [r3, #0]
			isButton1_pressed();
 8000a88:	f7ff fb60 	bl	800014c <isButton1_pressed>
		}
		break;
 8000a8c:	e032      	b.n	8000af4 <fmsRun+0x1d8>
	case AMBER1_RED2:
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2102      	movs	r1, #2
 8000a92:	481d      	ldr	r0, [pc, #116]	; (8000b08 <fmsRun+0x1ec>)
 8000a94:	f001 f88d 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <fmsRun+0x1ec>)
 8000a9e:	f001 f888 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <fmsRun+0x1ec>)
 8000aa8:	f001 f883 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4815      	ldr	r0, [pc, #84]	; (8000b08 <fmsRun+0x1ec>)
 8000ab2:	f001 f87e 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2140      	movs	r1, #64	; 0x40
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <fmsRun+0x1ec>)
 8000abc:	f001 f879 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <fmsRun+0x1ec>)
 8000ac6:	f001 f874 	bl	8001bb2 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <fmsRun+0x1f0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d112      	bne.n	8000af8 <fmsRun+0x1dc>
			setTimer1(duration_green);
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <fmsRun+0x1e8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fbf0 	bl	80012bc <setTimer1>
			status = RED1_GREEN2;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <fmsRun+0x1e4>)
 8000ade:	2202      	movs	r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
			isButton1_pressed();
 8000ae2:	f7ff fb33 	bl	800014c <isButton1_pressed>
		}
		break;
 8000ae6:	e007      	b.n	8000af8 <fmsRun+0x1dc>
	default:
		break;
 8000ae8:	bf00      	nop
 8000aea:	e006      	b.n	8000afa <fmsRun+0x1de>
		break;
 8000aec:	bf00      	nop
 8000aee:	e004      	b.n	8000afa <fmsRun+0x1de>
		break;
 8000af0:	bf00      	nop
 8000af2:	e002      	b.n	8000afa <fmsRun+0x1de>
		break;
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <fmsRun+0x1de>
		break;
 8000af8:	bf00      	nop
	}
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000064 	.word	0x20000064
 8000b04:	20000060 	.word	0x20000060
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	200000b8 	.word	0x200000b8
 8000b10:	20000058 	.word	0x20000058

08000b14 <display_7SEG>:
int temp_duration_amber = 2000;

int num_MODE = 2;


	void display_7SEG(int num){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	f200 8180 	bhi.w	8000e24 <display_7SEG+0x310>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <display_7SEG+0x18>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b55 	.word	0x08000b55
 8000b30:	08000b9d 	.word	0x08000b9d
 8000b34:	08000be5 	.word	0x08000be5
 8000b38:	08000c2d 	.word	0x08000c2d
 8000b3c:	08000c75 	.word	0x08000c75
 8000b40:	08000cbd 	.word	0x08000cbd
 8000b44:	08000d05 	.word	0x08000d05
 8000b48:	08000d4d 	.word	0x08000d4d
 8000b4c:	08000d95 	.word	0x08000d95
 8000b50:	08000ddd 	.word	0x08000ddd
			switch (num) {
				case 0:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	48b4      	ldr	r0, [pc, #720]	; (8000e2c <display_7SEG+0x318>)
 8000b5a:	f001 f82a 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	48b2      	ldr	r0, [pc, #712]	; (8000e2c <display_7SEG+0x318>)
 8000b64:	f001 f825 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	48af      	ldr	r0, [pc, #700]	; (8000e2c <display_7SEG+0x318>)
 8000b6e:	f001 f820 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2108      	movs	r1, #8
 8000b76:	48ad      	ldr	r0, [pc, #692]	; (8000e2c <display_7SEG+0x318>)
 8000b78:	f001 f81b 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	48aa      	ldr	r0, [pc, #680]	; (8000e2c <display_7SEG+0x318>)
 8000b82:	f001 f816 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	48a8      	ldr	r0, [pc, #672]	; (8000e2c <display_7SEG+0x318>)
 8000b8c:	f001 f811 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	48a5      	ldr	r0, [pc, #660]	; (8000e2c <display_7SEG+0x318>)
 8000b96:	f001 f80c 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000b9a:	e143      	b.n	8000e24 <display_7SEG+0x310>
						case 1:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	48a2      	ldr	r0, [pc, #648]	; (8000e2c <display_7SEG+0x318>)
 8000ba2:	f001 f806 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	48a0      	ldr	r0, [pc, #640]	; (8000e2c <display_7SEG+0x318>)
 8000bac:	f001 f801 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	489d      	ldr	r0, [pc, #628]	; (8000e2c <display_7SEG+0x318>)
 8000bb6:	f000 fffc 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	489b      	ldr	r0, [pc, #620]	; (8000e2c <display_7SEG+0x318>)
 8000bc0:	f000 fff7 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4898      	ldr	r0, [pc, #608]	; (8000e2c <display_7SEG+0x318>)
 8000bca:	f000 fff2 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4896      	ldr	r0, [pc, #600]	; (8000e2c <display_7SEG+0x318>)
 8000bd4:	f000 ffed 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	4893      	ldr	r0, [pc, #588]	; (8000e2c <display_7SEG+0x318>)
 8000bde:	f000 ffe8 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000be2:	e11f      	b.n	8000e24 <display_7SEG+0x310>
						case 2:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	4890      	ldr	r0, [pc, #576]	; (8000e2c <display_7SEG+0x318>)
 8000bea:	f000 ffe2 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	488e      	ldr	r0, [pc, #568]	; (8000e2c <display_7SEG+0x318>)
 8000bf4:	f000 ffdd 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	488b      	ldr	r0, [pc, #556]	; (8000e2c <display_7SEG+0x318>)
 8000bfe:	f000 ffd8 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	4889      	ldr	r0, [pc, #548]	; (8000e2c <display_7SEG+0x318>)
 8000c08:	f000 ffd3 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4886      	ldr	r0, [pc, #536]	; (8000e2c <display_7SEG+0x318>)
 8000c12:	f000 ffce 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4884      	ldr	r0, [pc, #528]	; (8000e2c <display_7SEG+0x318>)
 8000c1c:	f000 ffc9 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4881      	ldr	r0, [pc, #516]	; (8000e2c <display_7SEG+0x318>)
 8000c26:	f000 ffc4 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000c2a:	e0fb      	b.n	8000e24 <display_7SEG+0x310>
						case 3:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	487e      	ldr	r0, [pc, #504]	; (8000e2c <display_7SEG+0x318>)
 8000c32:	f000 ffbe 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2102      	movs	r1, #2
 8000c3a:	487c      	ldr	r0, [pc, #496]	; (8000e2c <display_7SEG+0x318>)
 8000c3c:	f000 ffb9 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	4879      	ldr	r0, [pc, #484]	; (8000e2c <display_7SEG+0x318>)
 8000c46:	f000 ffb4 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	4877      	ldr	r0, [pc, #476]	; (8000e2c <display_7SEG+0x318>)
 8000c50:	f000 ffaf 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	4874      	ldr	r0, [pc, #464]	; (8000e2c <display_7SEG+0x318>)
 8000c5a:	f000 ffaa 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	4872      	ldr	r0, [pc, #456]	; (8000e2c <display_7SEG+0x318>)
 8000c64:	f000 ffa5 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	486f      	ldr	r0, [pc, #444]	; (8000e2c <display_7SEG+0x318>)
 8000c6e:	f000 ffa0 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000c72:	e0d7      	b.n	8000e24 <display_7SEG+0x310>
						case 4:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	486c      	ldr	r0, [pc, #432]	; (8000e2c <display_7SEG+0x318>)
 8000c7a:	f000 ff9a 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	486a      	ldr	r0, [pc, #424]	; (8000e2c <display_7SEG+0x318>)
 8000c84:	f000 ff95 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4867      	ldr	r0, [pc, #412]	; (8000e2c <display_7SEG+0x318>)
 8000c8e:	f000 ff90 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4865      	ldr	r0, [pc, #404]	; (8000e2c <display_7SEG+0x318>)
 8000c98:	f000 ff8b 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4862      	ldr	r0, [pc, #392]	; (8000e2c <display_7SEG+0x318>)
 8000ca2:	f000 ff86 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4860      	ldr	r0, [pc, #384]	; (8000e2c <display_7SEG+0x318>)
 8000cac:	f000 ff81 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	485d      	ldr	r0, [pc, #372]	; (8000e2c <display_7SEG+0x318>)
 8000cb6:	f000 ff7c 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000cba:	e0b3      	b.n	8000e24 <display_7SEG+0x310>
						case 5:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	485a      	ldr	r0, [pc, #360]	; (8000e2c <display_7SEG+0x318>)
 8000cc2:	f000 ff76 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4858      	ldr	r0, [pc, #352]	; (8000e2c <display_7SEG+0x318>)
 8000ccc:	f000 ff71 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4855      	ldr	r0, [pc, #340]	; (8000e2c <display_7SEG+0x318>)
 8000cd6:	f000 ff6c 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4853      	ldr	r0, [pc, #332]	; (8000e2c <display_7SEG+0x318>)
 8000ce0:	f000 ff67 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <display_7SEG+0x318>)
 8000cea:	f000 ff62 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	484e      	ldr	r0, [pc, #312]	; (8000e2c <display_7SEG+0x318>)
 8000cf4:	f000 ff5d 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	484b      	ldr	r0, [pc, #300]	; (8000e2c <display_7SEG+0x318>)
 8000cfe:	f000 ff58 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000d02:	e08f      	b.n	8000e24 <display_7SEG+0x310>
						case 6:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	4848      	ldr	r0, [pc, #288]	; (8000e2c <display_7SEG+0x318>)
 8000d0a:	f000 ff52 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2102      	movs	r1, #2
 8000d12:	4846      	ldr	r0, [pc, #280]	; (8000e2c <display_7SEG+0x318>)
 8000d14:	f000 ff4d 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4843      	ldr	r0, [pc, #268]	; (8000e2c <display_7SEG+0x318>)
 8000d1e:	f000 ff48 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2108      	movs	r1, #8
 8000d26:	4841      	ldr	r0, [pc, #260]	; (8000e2c <display_7SEG+0x318>)
 8000d28:	f000 ff43 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2110      	movs	r1, #16
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <display_7SEG+0x318>)
 8000d32:	f000 ff3e 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2120      	movs	r1, #32
 8000d3a:	483c      	ldr	r0, [pc, #240]	; (8000e2c <display_7SEG+0x318>)
 8000d3c:	f000 ff39 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	4839      	ldr	r0, [pc, #228]	; (8000e2c <display_7SEG+0x318>)
 8000d46:	f000 ff34 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000d4a:	e06b      	b.n	8000e24 <display_7SEG+0x310>
						case 7:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4836      	ldr	r0, [pc, #216]	; (8000e2c <display_7SEG+0x318>)
 8000d52:	f000 ff2e 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <display_7SEG+0x318>)
 8000d5c:	f000 ff29 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2104      	movs	r1, #4
 8000d64:	4831      	ldr	r0, [pc, #196]	; (8000e2c <display_7SEG+0x318>)
 8000d66:	f000 ff24 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	482f      	ldr	r0, [pc, #188]	; (8000e2c <display_7SEG+0x318>)
 8000d70:	f000 ff1f 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	482c      	ldr	r0, [pc, #176]	; (8000e2c <display_7SEG+0x318>)
 8000d7a:	f000 ff1a 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	482a      	ldr	r0, [pc, #168]	; (8000e2c <display_7SEG+0x318>)
 8000d84:	f000 ff15 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <display_7SEG+0x318>)
 8000d8e:	f000 ff10 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000d92:	e047      	b.n	8000e24 <display_7SEG+0x310>
						case 8:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	4824      	ldr	r0, [pc, #144]	; (8000e2c <display_7SEG+0x318>)
 8000d9a:	f000 ff0a 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <display_7SEG+0x318>)
 8000da4:	f000 ff05 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2104      	movs	r1, #4
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <display_7SEG+0x318>)
 8000dae:	f000 ff00 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2108      	movs	r1, #8
 8000db6:	481d      	ldr	r0, [pc, #116]	; (8000e2c <display_7SEG+0x318>)
 8000db8:	f000 fefb 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <display_7SEG+0x318>)
 8000dc2:	f000 fef6 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	4818      	ldr	r0, [pc, #96]	; (8000e2c <display_7SEG+0x318>)
 8000dcc:	f000 fef1 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <display_7SEG+0x318>)
 8000dd6:	f000 feec 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000dda:	e023      	b.n	8000e24 <display_7SEG+0x310>
						case 9:
							HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <display_7SEG+0x318>)
 8000de2:	f000 fee6 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <display_7SEG+0x318>)
 8000dec:	f000 fee1 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <display_7SEG+0x318>)
 8000df6:	f000 fedc 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	480b      	ldr	r0, [pc, #44]	; (8000e2c <display_7SEG+0x318>)
 8000e00:	f000 fed7 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2110      	movs	r1, #16
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <display_7SEG+0x318>)
 8000e0a:	f000 fed2 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2120      	movs	r1, #32
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <display_7SEG+0x318>)
 8000e14:	f000 fecd 	bl	8001bb2 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <display_7SEG+0x318>)
 8000e1e:	f000 fec8 	bl	8001bb2 <HAL_GPIO_WritePin>
							break;
 8000e22:	bf00      	nop
			}
		}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <update7SEG>:

	void update7SEG( int index) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d82d      	bhi.n	8000e9a <update7SEG+0x6a>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <update7SEG+0x14>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e65 	.word	0x08000e65
 8000e4c:	08000e77 	.word	0x08000e77
 8000e50:	08000e89 	.word	0x08000e89
		switch (index) {
		case 0:
			clearAll_7SEG();
 8000e54:	f000 f84c 	bl	8000ef0 <clearAll_7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	4811      	ldr	r0, [pc, #68]	; (8000ea4 <update7SEG+0x74>)
 8000e5e:	f000 fea8 	bl	8001bb2 <HAL_GPIO_WritePin>
			break;
 8000e62:	e01a      	b.n	8000e9a <update7SEG+0x6a>
		case 1:
			clearAll_7SEG();
 8000e64:	f000 f844 	bl	8000ef0 <clearAll_7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <update7SEG+0x74>)
 8000e70:	f000 fe9f 	bl	8001bb2 <HAL_GPIO_WritePin>
			break;
 8000e74:	e011      	b.n	8000e9a <update7SEG+0x6a>
		case 2:
			clearAll_7SEG();
 8000e76:	f000 f83b 	bl	8000ef0 <clearAll_7SEG>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <update7SEG+0x74>)
 8000e82:	f000 fe96 	bl	8001bb2 <HAL_GPIO_WritePin>
			break;
 8000e86:	e008      	b.n	8000e9a <update7SEG+0x6a>
		case 3:
			clearAll_7SEG();
 8000e88:	f000 f832 	bl	8000ef0 <clearAll_7SEG>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <update7SEG+0x74>)
 8000e94:	f000 fe8d 	bl	8001bb2 <HAL_GPIO_WritePin>
			break;
 8000e98:	bf00      	nop
		}
	}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40010800 	.word	0x40010800

08000ea8 <clearALL_light>:
//			led_buffer[2] = 0;
//			led_buffer[3] = display_led2;
//		}
//	}

	void clearALL_light(){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2102      	movs	r1, #2
 8000eb0:	480e      	ldr	r0, [pc, #56]	; (8000eec <clearALL_light+0x44>)
 8000eb2:	f000 fe7e 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2104      	movs	r1, #4
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <clearALL_light+0x44>)
 8000ebc:	f000 fe79 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <clearALL_light+0x44>)
 8000ec6:	f000 fe74 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2110      	movs	r1, #16
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <clearALL_light+0x44>)
 8000ed0:	f000 fe6f 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port, AMBER_LED2_Pin, SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <clearALL_light+0x44>)
 8000eda:	f000 fe6a 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4802      	ldr	r0, [pc, #8]	; (8000eec <clearALL_light+0x44>)
 8000ee4:	f000 fe65 	bl	8001bb2 <HAL_GPIO_WritePin>
	}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40010800 	.word	0x40010800

08000ef0 <clearAll_7SEG>:

	void clearAll_7SEG(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <clearAll_7SEG+0x38>)
 8000efa:	f000 fe5a 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <clearAll_7SEG+0x38>)
 8000f06:	f000 fe54 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <clearAll_7SEG+0x38>)
 8000f12:	f000 fe4e 	bl	8001bb2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <clearAll_7SEG+0x38>)
 8000f1e:	f000 fe48 	bl	8001bb2 <HAL_GPIO_WritePin>
	}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40010800 	.word	0x40010800

08000f2c <blink_red_led_2hz>:

	void blink_red_led_2hz(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
		if(timer4_flag == 1){
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <blink_red_led_2hz+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d11f      	bne.n	8000f78 <blink_red_led_2hz+0x4c>
			HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f3c:	f000 fe51 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2108      	movs	r1, #8
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f46:	f000 fe34 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f50:	f000 fe2f 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 8000f54:	2110      	movs	r1, #16
 8000f56:	480a      	ldr	r0, [pc, #40]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f58:	f000 fe43 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f62:	f000 fe26 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <blink_red_led_2hz+0x54>)
 8000f6c:	f000 fe21 	bl	8001bb2 <HAL_GPIO_WritePin>
			setTimer4(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f74:	f000 f9f6 	bl	8001364 <setTimer4>
		}
	}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000d0 	.word	0x200000d0
 8000f80:	40010800 	.word	0x40010800

08000f84 <blink_green_led_2hz>:

	void blink_green_led_2hz(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
		if(timer4_flag == 1){
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <blink_green_led_2hz+0x50>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d11f      	bne.n	8000fd0 <blink_green_led_2hz+0x4c>
			HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000f96:	f000 fe0c 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000f9e:	f000 fe20 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000fa8:	f000 fe03 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000fb2:	f000 fdfe 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000fba:	f000 fe12 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin, SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <blink_green_led_2hz+0x54>)
 8000fc4:	f000 fdf5 	bl	8001bb2 <HAL_GPIO_WritePin>
			setTimer4(500);
 8000fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fcc:	f000 f9ca 	bl	8001364 <setTimer4>
		}
	}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200000d0 	.word	0x200000d0
 8000fd8:	40010800 	.word	0x40010800

08000fdc <blink_amber_led_2hz>:

	void blink_amber_led_2hz(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
		if(timer4_flag == 1){
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <blink_amber_led_2hz+0x50>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d11f      	bne.n	8001028 <blink_amber_led_2hz+0x4c>
			HAL_GPIO_WritePin(RED_LED1_GPIO_Port, RED_LED1_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2102      	movs	r1, #2
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <blink_amber_led_2hz+0x54>)
 8000fee:	f000 fde0 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <blink_amber_led_2hz+0x54>)
 8000ff8:	f000 fddb 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(AMBER_LED1_GPIO_Port, AMBER_LED1_Pin);
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <blink_amber_led_2hz+0x54>)
 8001000:	f000 fdef 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(RED_LED2_GPIO_Port, RED_LED2_Pin, SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <blink_amber_led_2hz+0x54>)
 800100a:	f000 fdd2 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <blink_amber_led_2hz+0x54>)
 8001014:	f000 fdcd 	bl	8001bb2 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(AMBER_LED2_GPIO_Port,  AMBER_LED2_Pin);
 8001018:	2120      	movs	r1, #32
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <blink_amber_led_2hz+0x54>)
 800101c:	f000 fde1 	bl	8001be2 <HAL_GPIO_TogglePin>
			setTimer4(500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f000 f99e 	bl	8001364 <setTimer4>
		}
	}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000d0 	.word	0x200000d0
 8001030:	40010800 	.word	0x40010800

08001034 <check_valid_duration>:
			duration_green = temp_duration_green;
			duration_amber = temp_duration_amber;
		}
	}

	int check_valid_duration(){
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
		int total = duration_amber + duration_green;
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <check_valid_duration+0x3c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <check_valid_duration+0x40>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	607b      	str	r3, [r7, #4]
		if(!(duration_red = total) || !(duration_green >= duration_amber)){
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <check_valid_duration+0x44>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <check_valid_duration+0x44>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <check_valid_duration+0x2c>
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <check_valid_duration+0x40>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <check_valid_duration+0x3c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	da01      	bge.n	8001064 <check_valid_duration+0x30>
			return 0;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <check_valid_duration+0x32>
		}
		return 1;
 8001064:	2301      	movs	r3, #1
	}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	20000058 	.word	0x20000058
 8001074:	20000060 	.word	0x20000060
 8001078:	2000005c 	.word	0x2000005c

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001080:	f000 fa96 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001084:	f000 f81e 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001088:	f000 f858 	bl	800113c <MX_TIM2_Init>
  MX_GPIO_Init();
 800108c:	f000 f8a2 	bl	80011d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <main+0x40>)
 8001092:	f001 f9eb 	bl	800246c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  status = INIT;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <main+0x44>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
//  time_light1 = duration_red/1000;
//  time_light2 = duration_green/1000;
  setTimer2(250);
 800109c:	20fa      	movs	r0, #250	; 0xfa
 800109e:	f000 f929 	bl	80012f4 <setTimer2>
  setTimer3(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f000 f941 	bl	800132c <setTimer3>
  setTimer4(500);
 80010aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ae:	f000 f959 	bl	8001364 <setTimer4>

  while (1)
  {
	  fms_manual_run();
 80010b2:	f7ff f9b5 	bl	8000420 <fms_manual_run>
	  fmsRun();
 80010b6:	f7ff fc31 	bl	800091c <fmsRun>
	  fms_manual_run();
 80010ba:	e7fa      	b.n	80010b2 <main+0x36>
 80010bc:	200000d4 	.word	0x200000d4
 80010c0:	20000064 	.word	0x20000064

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fd86 	bl	8002be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2310      	movs	r3, #16
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fd8a 	bl	8001c14 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001106:	f000 f8d3 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fff6 	bl	8002114 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112e:	f000 f8bf 	bl	80012b0 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0x94>)
 800115a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001162:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM2_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001170:	2209      	movs	r2, #9
 8001172:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM2_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <MX_TIM2_Init+0x94>)
 8001182:	f001 f923 	bl	80023cc <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800118c:	f000 f890 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <MX_TIM2_Init+0x94>)
 800119e:	f001 fab9 	bl	8002714 <HAL_TIM_ConfigClockSource>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 f882 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_TIM2_Init+0x94>)
 80011ba:	f001 fc85 	bl	8002ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011c4:	f000 f874 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000d4 	.word	0x200000d4

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_GPIO_Init+0xb8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <MX_GPIO_Init+0xb8>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_GPIO_Init+0xb8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_GPIO_Init+0xb8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <MX_GPIO_Init+0xb8>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_GPIO_Init+0xb8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
 8001218:	2200      	movs	r2, #0
 800121a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800121e:	481c      	ldr	r0, [pc, #112]	; (8001290 <MX_GPIO_Init+0xbc>)
 8001220:	f000 fcc7 	bl	8001bb2 <HAL_GPIO_WritePin>
                          |AMBER_LED2_Pin|GREEN_LED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	217f      	movs	r1, #127	; 0x7f
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0xc0>)
 800122a:	f000 fcc2 	bl	8001bb2 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin GREEN_LED1_Pin RED_LED2_Pin
                           AMBER_LED2_Pin GREEN_LED2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
 800122e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001232:	60bb      	str	r3, [r7, #8]
                          |AMBER_LED2_Pin|GREEN_LED2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2302      	movs	r3, #2
 800123e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_GPIO_Init+0xbc>)
 8001248:	f000 fb22 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800124c:	237f      	movs	r3, #127	; 0x7f
 800124e:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xc0>)
 8001264:	f000 fb14 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_3_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_3_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8001268:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001272:	2301      	movs	r3, #1
 8001274:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_GPIO_Init+0xc0>)
 800127e:	f000 fb07 	bl	8001890 <HAL_GPIO_Init>

}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00

08001298 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	timerRun();
 80012a0:	f000 f87c 	bl	800139c <timerRun>
	getKeyInput();
 80012a4:	f7fe ffaa 	bl	80001fc <getKeyInput>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <setTimer1>:

int timer4_counter = 0;
int timer4_flag = 0;


void setTimer1(int duration) {
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/10;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <setTimer1+0x2c>)
 80012c8:	fb82 1203 	smull	r1, r2, r2, r3
 80012cc:	1092      	asrs	r2, r2, #2
 80012ce:	17db      	asrs	r3, r3, #31
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <setTimer1+0x30>)
 80012d4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <setTimer1+0x34>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	66666667 	.word	0x66666667
 80012ec:	200000b4 	.word	0x200000b4
 80012f0:	200000b8 	.word	0x200000b8

080012f4 <setTimer2>:

void setTimer2(int duration) {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/10;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <setTimer2+0x2c>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	1092      	asrs	r2, r2, #2
 8001306:	17db      	asrs	r3, r3, #31
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <setTimer2+0x30>)
 800130c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <setTimer2+0x34>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	66666667 	.word	0x66666667
 8001324:	200000bc 	.word	0x200000bc
 8001328:	200000c0 	.word	0x200000c0

0800132c <setTimer3>:

void setTimer3(int duration) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/10;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <setTimer3+0x2c>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1092      	asrs	r2, r2, #2
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4a06      	ldr	r2, [pc, #24]	; (800135c <setTimer3+0x30>)
 8001344:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <setTimer3+0x34>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	66666667 	.word	0x66666667
 800135c:	200000c4 	.word	0x200000c4
 8001360:	200000c8 	.word	0x200000c8

08001364 <setTimer4>:

void setTimer4(int duration) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/10;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <setTimer4+0x2c>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	1092      	asrs	r2, r2, #2
 8001376:	17db      	asrs	r3, r3, #31
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <setTimer4+0x30>)
 800137c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <setTimer4+0x34>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	66666667 	.word	0x66666667
 8001394:	200000cc 	.word	0x200000cc
 8001398:	200000d0 	.word	0x200000d0

0800139c <timerRun>:



void timerRun() {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
		if (timer1_counter > 0) {
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <timerRun+0x8c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dd0b      	ble.n	80013c0 <timerRun+0x24>
			 timer1_counter--;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <timerRun+0x8c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <timerRun+0x8c>)
 80013b0:	6013      	str	r3, [r2, #0]
			 if(timer1_counter <= 0) {
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <timerRun+0x8c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	dc02      	bgt.n	80013c0 <timerRun+0x24>
				 timer1_flag = 1;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <timerRun+0x90>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
			 }
		}

		if (timer2_counter > 0) {
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <timerRun+0x94>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dd0b      	ble.n	80013e0 <timerRun+0x44>
			 timer2_counter--;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <timerRun+0x94>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <timerRun+0x94>)
 80013d0:	6013      	str	r3, [r2, #0]
			 if(timer2_counter <= 0) {
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <timerRun+0x94>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dc02      	bgt.n	80013e0 <timerRun+0x44>
				 timer2_flag = 1;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <timerRun+0x98>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
			 }
		}

		if (timer3_counter > 0) {
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <timerRun+0x9c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd0b      	ble.n	8001400 <timerRun+0x64>
			 timer3_counter--;
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <timerRun+0x9c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <timerRun+0x9c>)
 80013f0:	6013      	str	r3, [r2, #0]
			 if(timer3_counter <= 0) {
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <timerRun+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dc02      	bgt.n	8001400 <timerRun+0x64>
				 timer3_flag = 1;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <timerRun+0xa0>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
			 }
		}

		if (timer4_counter > 0) {
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <timerRun+0xa4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd0b      	ble.n	8001420 <timerRun+0x84>
			 timer4_counter--;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <timerRun+0xa4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <timerRun+0xa4>)
 8001410:	6013      	str	r3, [r2, #0]
			 if(timer4_counter <= 0) {
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <timerRun+0xa4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	dc02      	bgt.n	8001420 <timerRun+0x84>
				 timer4_flag = 1;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <timerRun+0xa8>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
			 }
		}
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200000b4 	.word	0x200000b4
 800142c:	200000b8 	.word	0x200000b8
 8001430:	200000bc 	.word	0x200000bc
 8001434:	200000c0 	.word	0x200000c0
 8001438:	200000c4 	.word	0x200000c4
 800143c:	200000c8 	.word	0x200000c8
 8001440:	200000cc 	.word	0x200000cc
 8001444:	200000d0 	.word	0x200000d0

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_MspInit+0x60>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_MspInit+0x60>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 f9a1 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f000 f9ba 	bl	800185a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f87f 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM2_IRQHandler+0x10>)
 800154a:	f000 ffdb 	bl	8002504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000d4 	.word	0x200000d4

08001558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001564:	f7ff fff8 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001580:	4c09      	ldr	r4, [pc, #36]	; (80015a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f001 fb05 	bl	8002b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001592:	f7ff fd73 	bl	800107c <main>
  bx lr
 8001596:	4770      	bx	lr
  ldr r0, =_sdata
 8001598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800159c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80015a0:	08002c3c 	.word	0x08002c3c
  ldr r2, =_sbss
 80015a4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80015a8:	20000120 	.word	0x20000120

080015ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC1_2_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_Init+0x28>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_Init+0x28>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f923 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff ff3c 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f93b 	bl	8001876 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f903 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000078 	.word	0x20000078
 8001634:	20000080 	.word	0x20000080
 8001638:	2000007c 	.word	0x2000007c

0800163c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_IncTick+0x1c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <HAL_IncTick+0x20>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a03      	ldr	r2, [pc, #12]	; (800165c <HAL_IncTick+0x20>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	20000080 	.word	0x20000080
 800165c:	2000011c 	.word	0x2000011c

08001660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b02      	ldr	r3, [pc, #8]	; (8001670 <HAL_GetTick+0x10>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	2000011c 	.word	0x2000011c

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4906      	ldr	r1, [pc, #24]	; (800170c <__NVIC_EnableIRQ+0x34>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff90 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff2d 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff42 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff35 	bl	80016d8 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b08b      	sub	sp, #44	; 0x2c
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e148      	b.n	8001b36 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a4:	2201      	movs	r2, #1
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8137 	bne.w	8001b30 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4aa3      	ldr	r2, [pc, #652]	; (8001b54 <HAL_GPIO_Init+0x2c4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d05e      	beq.n	800198a <HAL_GPIO_Init+0xfa>
 80018cc:	4aa1      	ldr	r2, [pc, #644]	; (8001b54 <HAL_GPIO_Init+0x2c4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d875      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 80018d2:	4aa1      	ldr	r2, [pc, #644]	; (8001b58 <HAL_GPIO_Init+0x2c8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d058      	beq.n	800198a <HAL_GPIO_Init+0xfa>
 80018d8:	4a9f      	ldr	r2, [pc, #636]	; (8001b58 <HAL_GPIO_Init+0x2c8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d86f      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 80018de:	4a9f      	ldr	r2, [pc, #636]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d052      	beq.n	800198a <HAL_GPIO_Init+0xfa>
 80018e4:	4a9d      	ldr	r2, [pc, #628]	; (8001b5c <HAL_GPIO_Init+0x2cc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d869      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 80018ea:	4a9d      	ldr	r2, [pc, #628]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d04c      	beq.n	800198a <HAL_GPIO_Init+0xfa>
 80018f0:	4a9b      	ldr	r2, [pc, #620]	; (8001b60 <HAL_GPIO_Init+0x2d0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d863      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 80018f6:	4a9b      	ldr	r2, [pc, #620]	; (8001b64 <HAL_GPIO_Init+0x2d4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d046      	beq.n	800198a <HAL_GPIO_Init+0xfa>
 80018fc:	4a99      	ldr	r2, [pc, #612]	; (8001b64 <HAL_GPIO_Init+0x2d4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d85d      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d82a      	bhi.n	800195c <HAL_GPIO_Init+0xcc>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d859      	bhi.n	80019be <HAL_GPIO_Init+0x12e>
 800190a:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <HAL_GPIO_Init+0x80>)
 800190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001910:	0800198b 	.word	0x0800198b
 8001914:	08001965 	.word	0x08001965
 8001918:	08001977 	.word	0x08001977
 800191c:	080019b9 	.word	0x080019b9
 8001920:	080019bf 	.word	0x080019bf
 8001924:	080019bf 	.word	0x080019bf
 8001928:	080019bf 	.word	0x080019bf
 800192c:	080019bf 	.word	0x080019bf
 8001930:	080019bf 	.word	0x080019bf
 8001934:	080019bf 	.word	0x080019bf
 8001938:	080019bf 	.word	0x080019bf
 800193c:	080019bf 	.word	0x080019bf
 8001940:	080019bf 	.word	0x080019bf
 8001944:	080019bf 	.word	0x080019bf
 8001948:	080019bf 	.word	0x080019bf
 800194c:	080019bf 	.word	0x080019bf
 8001950:	080019bf 	.word	0x080019bf
 8001954:	0800196d 	.word	0x0800196d
 8001958:	08001981 	.word	0x08001981
 800195c:	4a82      	ldr	r2, [pc, #520]	; (8001b68 <HAL_GPIO_Init+0x2d8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001962:	e02c      	b.n	80019be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e029      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	3304      	adds	r3, #4
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	e024      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	3308      	adds	r3, #8
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e01f      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	330c      	adds	r3, #12
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e01a      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001992:	2304      	movs	r3, #4
 8001994:	623b      	str	r3, [r7, #32]
          break;
 8001996:	e013      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a0:	2308      	movs	r3, #8
 80019a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	611a      	str	r2, [r3, #16]
          break;
 80019aa:	e009      	b.n	80019c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	615a      	str	r2, [r3, #20]
          break;
 80019b6:	e003      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e000      	b.n	80019c0 <HAL_GPIO_Init+0x130>
          break;
 80019be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	; 0xff
 80019c4:	d801      	bhi.n	80019ca <HAL_GPIO_Init+0x13a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_Init+0x13e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3304      	adds	r3, #4
 80019ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2bff      	cmp	r3, #255	; 0xff
 80019d4:	d802      	bhi.n	80019dc <HAL_GPIO_Init+0x14c>
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x152>
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	3b08      	subs	r3, #8
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	210f      	movs	r1, #15
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	6a39      	ldr	r1, [r7, #32]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8090 	beq.w	8001b30 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a55      	ldr	r2, [pc, #340]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_GPIO_Init+0x2dc>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x2e4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e0>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1dc>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a47      	ldr	r2, [pc, #284]	; (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1d8>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e004      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_Init+0x1e2>
 8001a70:	2300      	movs	r3, #0
 8001a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a82:	493b      	ldr	r1, [pc, #236]	; (8001b70 <HAL_GPIO_Init+0x2e0>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4937      	ldr	r1, [pc, #220]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4933      	ldr	r1, [pc, #204]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	492d      	ldr	r1, [pc, #180]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4929      	ldr	r1, [pc, #164]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4923      	ldr	r1, [pc, #140]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	491f      	ldr	r1, [pc, #124]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4919      	ldr	r1, [pc, #100]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4915      	ldr	r1, [pc, #84]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3301      	adds	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f aeaf 	bne.w	80018a4 <HAL_GPIO_Init+0x14>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	372c      	adds	r7, #44	; 0x2c
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	10320000 	.word	0x10320000
 8001b58:	10310000 	.word	0x10310000
 8001b5c:	10220000 	.word	0x10220000
 8001b60:	10210000 	.word	0x10210000
 8001b64:	10120000 	.word	0x10120000
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e001      	b.n	8001ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	807b      	strh	r3, [r7, #2]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc2:	787b      	ldrb	r3, [r7, #1]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bce:	e003      	b.n	8001bd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	611a      	str	r2, [r3, #16]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e26c      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8087 	beq.w	8001d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b89      	ldr	r3, [pc, #548]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x12c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d168      	bne.n	8001d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e246      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x76>
 8001c7c:	4b80      	ldr	r3, [pc, #512]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7f      	ldr	r2, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x98>
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b78      	ldr	r3, [pc, #480]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a77      	ldr	r2, [pc, #476]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xbc>
 8001cb6:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a71      	ldr	r2, [pc, #452]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a67      	ldr	r2, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fcb6 	bl	8001660 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fcb2 	bl	8001660 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	; 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e1fa      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe4>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fca2 	bl	8001660 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fc9e 	bl	8001660 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1e6      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x10c>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d063      	beq.n	8001e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d11c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d116      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1ba      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4939      	ldr	r1, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	e03a      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fc57 	bl	8001660 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7ff fc53 	bl	8001660 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e19b      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4927      	ldr	r1, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
 8001de8:	e015      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc36 	bl	8001660 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc32 	bl	8001660 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e17a      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03a      	beq.n	8001e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fc16 	bl	8001660 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fc12 	bl	8001660 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e15a      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f000 fa9a 	bl	8002390 <RCC_Delay>
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fbfc 	bl	8001660 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbf8 	bl	8001660 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e140      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	42420000 	.word	0x42420000
 8001e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b9e      	ldr	r3, [pc, #632]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e9      	bne.n	8001e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a6 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b97      	ldr	r3, [pc, #604]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a93      	ldr	r2, [pc, #588]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b91      	ldr	r3, [pc, #580]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b8e      	ldr	r3, [pc, #568]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b8b      	ldr	r3, [pc, #556]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a8a      	ldr	r2, [pc, #552]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fbb9 	bl	8001660 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fbb5 	bl	8001660 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	; 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0fd      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b81      	ldr	r3, [pc, #516]	; (800210c <HAL_RCC_OscConfig+0x4f8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x312>
 8001f18:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a7a      	ldr	r2, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x334>
 8001f2e:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a75      	ldr	r2, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	4b73      	ldr	r3, [pc, #460]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a72      	ldr	r2, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x356>
 8001f50:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a6c      	ldr	r2, [pc, #432]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	4b6a      	ldr	r3, [pc, #424]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a69      	ldr	r2, [pc, #420]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	4b67      	ldr	r3, [pc, #412]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a66      	ldr	r2, [pc, #408]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b64      	ldr	r3, [pc, #400]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a63      	ldr	r2, [pc, #396]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb69 	bl	8001660 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fb65 	bl	8001660 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0ab      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b57      	ldr	r3, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x37e>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb53 	bl	8001660 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb4f 	bl	8001660 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e095      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8081 	beq.w	80020fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d061      	beq.n	80020cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d146      	bne.n	800209e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb23 	bl	8001660 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fb1f 	bl	8001660 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e067      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	492d      	ldr	r1, [pc, #180]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a19      	ldr	r1, [r3, #32]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	430b      	orrs	r3, r1
 800206a:	4927      	ldr	r1, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff faf3 	bl	8001660 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff faef 	bl	8001660 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e037      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x46a>
 800209c:	e02f      	b.n	80020fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <HAL_RCC_OscConfig+0x4fc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fadc 	bl	8001660 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fad8 	bl	8001660 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e020      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x498>
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
 8002110:	42420060 	.word	0x42420060

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e073      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff fa2c 	bl	8001660 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff fa28 	bl	8001660 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e053      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d210      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490a      	ldr	r1, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1cc>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f98a 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08002c10 	.word	0x08002c10
 80022e0:	20000078 	.word	0x20000078
 80022e4:	2000007c 	.word	0x2000007c

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b04      	cmp	r3, #4
 8002310:	d002      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x30>
 8002312:	2b08      	cmp	r3, #8
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x36>
 8002316:	e027      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	e027      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0c9b      	lsrs	r3, r3, #18
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_RCC_GetSysClockFreq+0x94>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0c5b      	lsrs	r3, r3, #17
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800234a:	fb02 f203 	mul.w	r2, r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e004      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_GetSysClockFreq+0xa4>)
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x98>)
 800236a:	613b      	str	r3, [r7, #16]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	693b      	ldr	r3, [r7, #16]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08002c20 	.word	0x08002c20
 8002388:	08002c30 	.word	0x08002c30
 800238c:	003d0900 	.word	0x003d0900

08002390 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <RCC_Delay+0x34>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <RCC_Delay+0x38>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a5b      	lsrs	r3, r3, #9
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023ac:	bf00      	nop
  }
  while (Delay --);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	60fa      	str	r2, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <RCC_Delay+0x1c>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000078 	.word	0x20000078
 80023c8:	10624dd3 	.word	0x10624dd3

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff f85a 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 fa6e 	bl	80028ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e035      	b.n	80024f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIM_Base_Start_IT+0x90>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ae:	d004      	beq.n	80024ba <HAL_TIM_Base_Start_IT+0x4e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIM_Base_Start_IT+0x94>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d111      	bne.n	80024de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d010      	beq.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	e007      	b.n	80024ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b02      	cmp	r3, #2
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b02      	cmp	r3, #2
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0202 	mvn.w	r2, #2
 8002530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f9b4 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f9a7 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f9b6 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b04      	cmp	r3, #4
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0204 	mvn.w	r2, #4
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f98a 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f97d 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f98c 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0208 	mvn.w	r2, #8
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2204      	movs	r2, #4
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f960 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f953 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f962 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b10      	cmp	r3, #16
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b10      	cmp	r3, #16
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0210 	mvn.w	r2, #16
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2208      	movs	r2, #8
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f936 	bl	80028b4 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f929 	bl	80028a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f938 	bl	80028c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0201 	mvn.w	r2, #1
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fe08 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fa6b 	bl	8002b8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8fc 	bl	80028d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0220 	mvn.w	r2, #32
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fa36 	bl	8002b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x1c>
 800272c:	2302      	movs	r3, #2
 800272e:	e0b4      	b.n	800289a <HAL_TIM_ConfigClockSource+0x186>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d03e      	beq.n	80027e8 <HAL_TIM_ConfigClockSource+0xd4>
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276e:	f200 8087 	bhi.w	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	f000 8086 	beq.w	8002886 <HAL_TIM_ConfigClockSource+0x172>
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d87f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d01a      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0xa6>
 8002784:	2b70      	cmp	r3, #112	; 0x70
 8002786:	d87b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d050      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x11a>
 800278c:	2b60      	cmp	r3, #96	; 0x60
 800278e:	d877      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d03c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xfa>
 8002794:	2b50      	cmp	r3, #80	; 0x50
 8002796:	d873      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d058      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x13a>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d86f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d064      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x15a>
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	d86b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d060      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x15a>
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d867      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05c      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x15a>
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d05a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	e062      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f000 f95e 	bl	8002a8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	609a      	str	r2, [r3, #8]
      break;
 80027e6:	e04f      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f000 f947 	bl	8002a8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280a:	609a      	str	r2, [r3, #8]
      break;
 800280c:	e03c      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f8be 	bl	800299c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2150      	movs	r1, #80	; 0x50
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f915 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 800282c:	e02c      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f8dc 	bl	80029f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2160      	movs	r1, #96	; 0x60
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f905 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 800284c:	e01c      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f89e 	bl	800299c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f8f5 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 800286c:	e00c      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 f8ec 	bl	8002a56 <TIM_ITRx_SetConfig>
      break;
 800287e:	e003      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e000      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr
	...

080028ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a25      	ldr	r2, [pc, #148]	; (8002994 <TIM_Base_SetConfig+0xa8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x28>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x28>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <TIM_Base_SetConfig+0xac>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <TIM_Base_SetConfig+0xa8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <TIM_Base_SetConfig+0x52>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d003      	beq.n	800293e <TIM_Base_SetConfig+0x52>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <TIM_Base_SetConfig+0xac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d108      	bne.n	8002950 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <TIM_Base_SetConfig+0xa8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d103      	bne.n	8002984 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	615a      	str	r2, [r3, #20]
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400

0800299c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 030a 	bic.w	r3, r3, #10
 80029d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0210 	bic.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	031b      	lsls	r3, r3, #12
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f043 0307 	orr.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	021a      	lsls	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	609a      	str	r2, [r3, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e041      	b.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d004      	beq.n	8002b38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10c      	bne.n	8002b52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400

08002b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <__libc_init_array>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	4d0c      	ldr	r5, [pc, #48]	; (8002bd4 <__libc_init_array+0x38>)
 8002ba2:	4c0d      	ldr	r4, [pc, #52]	; (8002bd8 <__libc_init_array+0x3c>)
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	42a6      	cmp	r6, r4
 8002baa:	d109      	bne.n	8002bc0 <__libc_init_array+0x24>
 8002bac:	f000 f822 	bl	8002bf4 <_init>
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	4d0a      	ldr	r5, [pc, #40]	; (8002bdc <__libc_init_array+0x40>)
 8002bb4:	4c0a      	ldr	r4, [pc, #40]	; (8002be0 <__libc_init_array+0x44>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	42a6      	cmp	r6, r4
 8002bbc:	d105      	bne.n	8002bca <__libc_init_array+0x2e>
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc4:	4798      	blx	r3
 8002bc6:	3601      	adds	r6, #1
 8002bc8:	e7ee      	b.n	8002ba8 <__libc_init_array+0xc>
 8002bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bce:	4798      	blx	r3
 8002bd0:	3601      	adds	r6, #1
 8002bd2:	e7f2      	b.n	8002bba <__libc_init_array+0x1e>
 8002bd4:	08002c34 	.word	0x08002c34
 8002bd8:	08002c34 	.word	0x08002c34
 8002bdc:	08002c34 	.word	0x08002c34
 8002be0:	08002c38 	.word	0x08002c38

08002be4 <memset>:
 8002be4:	4603      	mov	r3, r0
 8002be6:	4402      	add	r2, r0
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d100      	bne.n	8002bee <memset+0xa>
 8002bec:	4770      	bx	lr
 8002bee:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf2:	e7f9      	b.n	8002be8 <memset+0x4>

08002bf4 <_init>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr

08002c00 <_fini>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr
